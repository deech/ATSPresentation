#+Title: ATS
#+Author: Aditya Siram
#+EPRESENT_FRAME_LEVEL: 1

* ATS
- Is an ML (not standard)
  - ADTS, pattern-matching, modules etc.
  - Same power of abstraction
- Dependently typed
- Theorem prover
  - Inductive, only.
- Optional GC

* ATS
- Linear logic to manage resources
  - Prove it exists, consume proof, repeat
  - file handles, sockets, anything
- But especially memory
  - Prove pointer is initialized, dereference, repeat
  - Type checked pointer arithmetic

* ATS
- Designed to work without a runtime.
  - Verified embedded/systems programming
- All the advantages of C/C++
- Very easy interop
  - C -> ATS is trivial
  - ATS -> C is easier than C++ -> C!
  - Sneak it in!

* Performance
- Performs as well as C/C++
[[file:ats-screenshot.png]]

* Performance
- Run anywhere C runs ...
- No boxing == zero overhead when setting/getting
- Unfreed memory == type error
- Unauthorized reads == type error
- Unauthorized writes == type error
- Type error!


* Hello World
- Minimal
#+BEGIN_EXAMPLE
val greet = lam () => "hello world\n"
implement main0 () = print(greet())
#+END_EXAMPLE

* Swap
- A standard swap function
#+BEGIN_SRC
void swap(void *i, void *j, size_t size) {
  void* tmp = malloc(size);
  memcpy(tmp, j, size);
  memcpy(j, i, size);
  memcpy(i, tmp, size);
  free(tmp);
}

void main() {
  int a = 1, b = 2;
  swap(&a, &b, sizeof(int));
  printf("After . a: %d, b: %d\n", a, b);
}
#+END_SRC

* Swap From ATS
- Copy-paste in between =%{^= and =%}=
#+BEGIN_EXAMPLE
  %{^
    void swap(void *i, void *j, size_t size) {
      void* tmp = malloc(size);
      memcpy(tmp, j, size);
      memcpy(j, i, size);
      memcpy(i, tmp, size);
      free(tmp);
    }
    ...
  %}
  ...
#+END_EXAMPLE

* Swap From ATS
- Convert C's =main= function to a runner
#+BEGIN_EXAMPLE
  %{^
    void swap(void *i, void *j, size_t size) {
      void* tmp = malloc(size);
      memcpy(tmp, j, size); memcpy(j, i, size); memcpy(i, tmp, size);
      free(tmp);
    }

    void swap_runner() {
      int a = 1, b = 2;
      swap(&a, &b, sizeof(int));
      printf("After . a: %d, b: %d\n", a, b);
    }
  %}
  ...
#+END_EXAMPLE

* Swap From ATS
- Add an ATS wrapper. No runtime overhead.
#+BEGIN_EXAMPLE
  %{^
    void swap(void *i, void *j, size_t size) {
      void* tmp = malloc(size);
      memcpy(tmp, j, size); memcpy(j, i, size); memcpy(i, tmp, size);
      free(tmp);
    }

    void swap_runner() {
      int a = 1, b = 2;
      swap(&a, &b, sizeof(int));
      printf("After . a: %d, b: %d\n", a, b);
    }
  %}

  extern fun swap_runner():void = "mac#swap_runner"
  ...
#+END_EXAMPLE

* Swap From ATS
- Call it.
#+BEGIN_EXAMPLE
  %{^
    void swap(void *i, void *j, size_t size) {
      void* tmp = malloc(size);
      memcpy(tmp, j, size); memcpy(j, i, size); memcpy(i, tmp, size);
      free(tmp);
    }

    void swap_runner() {
      int a = 1, b = 2;
      swap(&a, &b, sizeof(int));
      printf("After . a: %d, b: %d\n", a, b);
    }
  %}

  extern fun swap_runner():void = "ext#swap_runner"

  implement main0 () = swap_runner()
#+END_EXAMPLE

* Swap From ATS
#+BEGIN_EXAMPLE
  %{^
  #include ...

  void swap(void *i, void *j, size_t size) {
    ...
  }

  void swap_runner() {
    int a = 1, b = 2;
    swap(&a, &b, sizeof(int));
    printf("After . a: %d, b: %d\n", a, b);
  }
  %}

  extern fun swap_runner():void = "ext#swap_runner"

  implement main0 () = swap_runner()
#+END_EXAMPLE

- Results
#+BEGIN_EXAMPLE
After a: 2, b: 1
#+END_EXAMPLE

* Swap In ATS
- Import unsafe pointer ops.
#+BEGIN_EXAMPLE
  staload UN = "prelude/SATS/unsafe.sats"
#+END_EXAMPLE

* Swap In ATS
- Wrap C's =malloc=
#+BEGIN_EXAMPLE
  staload UN = "prelude/SATS/unsafe.sats"
  extern fun malloc (s: size_t): ptr = "mac#malloc"
#+END_EXAMPLE

* Swap In ATS
- Wrap C's =free=
#+BEGIN_EXAMPLE
  staload UN = "prelude/SATS/unsafe.sats"
  extern fun malloc (s: size_t): ptr = "mac#malloc"
  extern fun free (p: ptr):void = "mac#free"
#+END_EXAMPLE

* Swap In ATS
- Wrap C's =memcpy=
#+BEGIN_EXAMPLE
  staload UN = "prelude/SATS/unsafe.sats"
  extern fun malloc (s: size_t): ptr = "mac#malloc"
  extern fun free (p: ptr):void = "mac#free"
  extern fun memcpy(into: ptr, from: ptr, s: size_t): void = "mac#memcpy"
#+END_EXAMPLE

* Swap In ATS
- Swap in ATS
#+BEGIN_EXAMPLE
  staload UN = "prelude/SATS/unsafe.sats"
  extern fun malloc (s: size_t): ptr = "mac#malloc"
  extern fun free (p: ptr):void = "mac#free"
  extern fun memcpy(into: ptr, from: ptr, s: size_t): void = "mac#memcpy"
  fun swap(i: ptr, j: ptr, s: size_t): void = ...
#+END_EXAMPLE

* Swap In ATS
- Allocate =tmp= space.
#+BEGIN_EXAMPLE
  staload UN = "prelude/SATS/unsafe.sats"
  extern fun malloc (s: size_t): ptr = "mac#malloc"
  extern fun free (p: ptr):void = "mac#free"
  extern fun memcpy(into: ptr, from: ptr, s: size_t): void = "mac#memcpy"
  fun swap(i: ptr, j: ptr, s: size_t): void = let
    val tmp = malloc(s)
  in
#+END_EXAMPLE

* Swap In ATS
- Exactly the same as C version.
#+BEGIN_EXAMPLE
  staload UN = "prelude/SATS/unsafe.sats"
  extern fun malloc (s: size_t): ptr = "mac#malloc"
  extern fun free (p: ptr):void = "mac#free"
  extern fun memcpy(into: ptr, from: ptr, s: size_t): void = "mac#memcpy"
  fun swap(i: ptr, j: ptr, s: size_t): void = let
    val tmp = malloc(s)
  in
     memcpy(tmp,j,s); memcpy(j,i,s); memcpy(i,tmp,s);
     free(tmp);
  end
#+END_EXAMPLE

* Swap In ATS
- Allocate
#+BEGIN_EXAMPLE
  implement main0 () = let
    val i = malloc(sizeof<double>) // !!!!!!
    val j = malloc(sizeof<int>)
  in
   ...
#+END_EXAMPLE

* Swap In ATS
- Initialize
#+BEGIN_EXAMPLE
  implement main0 () = let
    val i = malloc(sizeof<double>) // !!!!!
    val j = malloc(sizeof<int>)
  in
    $UN.ptr0_set<int>(i, 1);
    $UN.ptr0_set<int>(j, 2);
    ...
#+END_EXAMPLE

* Swap In ATS
- Swap
#+BEGIN_EXAMPLE
  implement main0 () = let
    val i = malloc(sizeof<double>) // !!!!!
    val j = malloc(sizeof<int>)
  in
    $UN.ptr0_set<int>(i, 1);
    $UN.ptr0_set<int>(j, 2);
    swap(i,j,int);
    ...
#+END_EXAMPLE

* Swap In ATS
- Print
#+BEGIN_EXAMPLE
  implement main0 () = let
    val i = malloc(sizeof<double>) // !!!!!
    val j = malloc(sizeof<int>)
  in
    $UN.ptr0_set<int>(i, 1);
    $UN.ptr0_set<int>(j, 2);
    swap(i,j,int);
    print($UN.ptr0_get<int>(i)); print("\n");
    print($UN.ptr0_get<int>(j)); print("\n");
    ...
#+END_EXAMPLE

* Swap In ATS
- Free
#+BEGIN_EXAMPLE
  implement main0 () = let
    val i = malloc(sizeof<double>) // !!!!!
    val j = malloc(sizeof<int>)
  in
    $UN.ptr0_set<int>(i, 1);
    $UN.ptr0_set<int>(j, 2);
    swap(i,j,int);
    print($UN.ptr0_get<int>(i)); print("\n");
    print($UN.ptr0_get<int>(j)); print("\n");
    free(i)    // free(j) ?!!!!
#+END_EXAMPLE

* Swap In ATS
- Can totally mimic C
- Including the bugs
- Gradual migration

* A safer malloc/free
#+BEGIN_EXAMPLE
  extern fun malloc    extern fun malloc
                         {a:t@ype}              <--
    (s: size_t)     =>   (s:sizeof_t a)
                           :[l:addr | l > null]
      :ptr =                (a? @ l | ptr l) =
    "mac#malloc"         "mac#malloc"
#+END_EXAMPLE
- For all types =a=, of *sort* =t@ype= (unboxed type)

* A safer malloc/free
#+BEGIN_EXAMPLE
  extern fun malloc    extern fun malloc
                         {a:t@ype}
    (s: size_t)     =>   (s:sizeof_t a)         <--
                           :[l:addr | l > null]
      :ptr =                (a? @ l | ptr l) =
    "mac#malloc"         "mac#malloc"
#+END_EXAMPLE
- Given =sizeof_t= of *sort* =a=

* A safer malloc/free
#+BEGIN_EXAMPLE
  extern fun malloc    extern fun malloc
                         {a:t@ype}
    (s: size_t)     =>   (s:sizeof_t a)
                           :[l:addr | l > null] <--
      :ptr =                (a? @ l | ptr l) =  <--
    "mac#malloc"         "mac#malloc"
#+END_EXAMPLE
- Returns
  - proof that =a= (uninitialized) is at =l=
  - pointer to some non-null address =l=

* A safer malloc/free
#+BEGIN_EXAMPLE
  extern fun free    extern fun free
                       {a:t@ype}            <--
                  =>   {l : addr| l > null} <--
    (p: ptr)           (a @ l | ptr l)
      :void =            :void =
    "mac#free"         "mac#free"
#+END_EXAMPLE
- For all types =a=, of *sort* =t@ype= (unboxed)
- For all non-null addresses, =l=

* A safer malloc/free
#+BEGIN_EXAMPLE
  extern fun free    extern fun free
                       {a:t@ype}
                  =>   {l : addr| l > null}
    (p: ptr)           (a @ l | ptr l)      <--
      :void =            :void =
    "mac#free"         "mac#free"
#+END_EXAMPLE
- Given
  - proof that =a= (initialized) is at some non-null =l=
  - pointer to =l=

* A safer malloc/free
#+BEGIN_EXAMPLE
  extern fun free    extern fun free
                       {a:t@ype}
                  =>   {l : addr| l > null}
    (p: ptr)           (a @ l | ptr l)
      :void =            :void =            <--
    "mac#free"         "mac#free"
#+END_EXAMPLE
- /Consumes/ proof, returns nothing

* A safer malloc/free
- Example usage
#+BEGIN_EXAMPLE
implement main0 () = let
  val (pf | a) = malloc (sizeof<int>)
in
  free(pf | a);
end
#+END_EXAMPLE
- Allocate, retrive proof via pattern-matching
- Free, using that proof

* A safer malloc/free
- `a` is not freed. Unconsumed proof in scope.
#+BEGIN_EXAMPLE
implement main0 () = let
  val (pf | a) = malloc (sizeof<int>)
in
  ()       // type error!
end
#+END_EXAMPLE

* A safer malloc/free
- `free` not given proof that `a` is initialized
#+BEGIN_EXAMPLE
implement main0 () = let
  val (pf | a) = malloc (sizeof<int>)
in
  free(a); // type error!
end
#+END_EXAMPLE

* A safer swap
#+BEGIN_EXAMPLE
  fun swap            extern fun swap
                        {a:t@ype}
                        {l1: addr | l1 > null}
                  =>    {l2: addr | l2 > null}
                        (a @ l1 , a @ l2 |
      (i: ptr,             i:ptr l1,
       j: ptr,             j:ptr l2,
       s: size_t):         s:sizeof_t a):
      void = ...          (a @ l1, a @ l2 | void) = ...
#+END_EXAMPLE
- Like =free=, expect with 2 proofs & pointers

* A safer swap
- Allocate, retrieve proofs
#+BEGIN_EXAMPLE
implement main0 () = let
  val (pfi | i) = malloc (sizeof<int>)
  val (pfj | j) = malloc (sizeof<int>)
  ...
#+END_EXAMPLE

* A safer swap
- Initialize, passing proofs to setter.
#+BEGIN_EXAMPLE
implement main0 () = let
  val (pfi | i) = malloc (sizeof<int>)
  val (pfj | j) = malloc (sizeof<int>)
  val _ = ptr_set(pfi | i, 1)
  val _ = ptr_set(pfj | j, 2)
  ...
#+END_EXAMPLE

* A safer swap
- Swap, returns *new* proofs.
#+BEGIN_EXAMPLE
implement main0 () = let
  val (pfi | i) = malloc (sizeof<int>)
  val (pfj | j) = malloc (sizeof<int>)
  val _ = ptr_set(pfi | i, 1)
  val _ = ptr_set(pfj | j, 2)
  val (pfi1,pfj1| ()) = swap(pfi, pfj | i, j, sizeof<int>)
in
  ...
#+END_EXAMPLE

* A safer swap
- Free, using new proofs.
#+BEGIN_EXAMPLE
implement main0 () = let
  val (pfi | i) = malloc (sizeof<int>)
  val (pfj | j) = malloc (sizeof<int>)
  val _ = ptr_set(pfi | i, 1)
  val _ = ptr_set(pfj | j, 2)
  val (pfi1,pfj1| ()) = swap(pfi, pfj | i, j, sizeof<int>)
in
  ...
  free(pfi1 | i);
  free(pfj1 | j);
end
#+END_EXAMPLE
* Printing a List
- The runner
#+BEGIN_EXAMPLE
implement main0() = {
  val a = list_make_intrange(0,10)
  val () = print_list (a)
  val () = list_vt_free (a)
}
#+END_EXAMPLE
- The [0 .. 9] is allocated on the heap
* First attempt
- Pattern match on a non-empty list
#+BEGIN_EXAMPLE
fun print_list (l: List_vt (int)): void =
  case+ l of
  | list_vt_cons (x, xs) => (
#+END_EXAMPLE
* First attempt
- Print and recurse
#+BEGIN_EXAMPLE
fun print_list (l: List_vt (int)): void =
  case+ l of
  | list_vt_cons (x, xs) => (
     fprint(stdout_ref, x);
     print_list(xs)
    )
#+END_EXAMPLE

* First attempt
- If nil, do nothing
#+BEGIN_EXAMPLE
fun print_list (l: List_vt (int)): void =
  case+ l of
  | list_vt_cons (x, xs) => (
     fprint(stdout_ref, x);
     print_list(xs)
    )
  | list_vt_nil () => ()
#+END_EXAMPLE

* First attempt
 - Compiler error!
 - Remember the list is a set of resources
 - Pattern matching dereferences the head
   - consumes the resource!
 - Freeing fails!
    #+BEGIN_EXAMPLE
    val () = list_vt_free(a)
    #+END_EXAMPLE

* Final Attempt
- A very /special/ function, =fold@=
- Pattern-matching unfolds the list
- =fold@= unconsumes the proof.

* Final Attempt
- This works.
#+BEGIN_EXAMPLE
fun print_list ...
  case+ l of
    | @list_vt_cons (x, xs) => (
          .. // print and recurse
          fold@ l
        )
    | list_vt_nil () => ()
#+END_EXAMPLE

* Filter
- Pattern match nil, note =fold@=
#+BEGIN_EXAMPLE
  case+ l of
  | @list_vt_nil () => (fold@ l; list_vt_nil)
#+END_EXAMPLE
- Non-tail recursive, just the body for now
-
* Filter
- Pattern match the =cons= case, note the =f(x)= guard
#+BEGIN_EXAMPLE
  case+ l of
  | @list_vt_nil () => (fold@ l; list_vt_nil)
  | @list_vt_cons (x, xs) when f (x) =>
#+END_EXAMPLE

* Filter
- Recurse on the rest of the list
#+BEGIN_EXAMPLE
  case+ l of
  | @list_vt_nil () => (fold@ l; list_vt_nil)
  | @list_vt_cons (x, xs) when f (x) => let
         val rest = list_vt_filter(xs,f)
#+END_EXAMPLE

* Filter
- For some reason this lemma is needed, ¯\_(ツ)_/¯
#+BEGIN_EXAMPLE
  case+ l of
  | @list_vt_nil () => (fold@ l; list_vt_nil)
  | @list_vt_cons (x, xs) when f (x) => let
         val rest = list_vt_filter(xs,f)
         prval () = lemma_list_vt_param (rest)
#+END_EXAMPLE

* Filter
- Recreate the list
#+BEGIN_EXAMPLE
  case+ l of
  | @list_vt_nil () => (fold@ l; list_vt_nil)
  | @list_vt_cons (x, xs) when f (x) => let
         val rest = list_vt_filter(xs,f)
         prval () = lemma_list_vt_param (rest)
         val r = list_vt_cons (x, rest)
       in
         fold@ l;
         r
       end
#+END_EXAMPLE

* Filter
- Re-inject the proof that =l= is untouched, return =r=
#+BEGIN_EXAMPLE
  case+ l of
  | @list_vt_nil () => (fold@ l; list_vt_nil)
  | @list_vt_cons (x, xs) when f (x) => let
         val rest = list_vt_filter(xs,f)
         prval () = lemma_list_vt_param (rest)
         val r = list_vt_cons (x, rest)
       in
         fold@ l; r
       end
#+END_EXAMPLE

* Filter
- Now type signature
#+BEGIN_EXAMPLE
fun {a:t@ype}                <--
    list_vt_filter
     {n: int}
     (l: !list_vt (a, n),
      f: a -> bool)
        :[k: int | k <= n]
         list_vt (a , k) = ...
#+END_EXAMPLE
- =a= is any unboxed type
  - like =malloc=, =free=, etc

* Filter
- Now type signature
#+BEGIN_EXAMPLE
fun {a:t@ype}
    list_vt_filter
     {n: int}                 <--
     (l: !list_vt (a, n),
      f: a -> bool)
        :[k: int | k <= n]
         list_vt (a , k) = ...
#+END_EXAMPLE
- any integer

* Filter
- Now type signature
#+BEGIN_EXAMPLE
fun {a:t@ype}
    list_vt_filter
     {n: int}
     (l: !list_vt (a, n),     <--
      f: a -> bool)
        :[k: int | k <= n]
         list_vt (a , k) = ...
#+END_EXAMPLE
- =list_vt= is a viewtype
  - Something of type =a=
  - paired with pointer (unseen)
  - Of length =n=
* Filter
- Now type signature
#+BEGIN_EXAMPLE
fun {a:t@ype}
    list_vt_filter
     {n: int}
     (l: !list_vt (a, n),
      f: a -> bool)          <--
        :[k: int | k <= n]
         list_vt (a , k) = ...
#+END_EXAMPLE
- The predicate function

* Filter
- Now type signature
#+BEGIN_EXAMPLE
fun {a:t@ype}
    list_vt_filter
     {n: int}
     (l: !list_vt (a, n),
      f: a -> bool)
        :[k: int | k <= n]  <--
         list_vt (a , k) =  <--
#+END_EXAMPLE
- Returns a list
  - *statically* proven to be <= n!

* Filter
- The  =list_vt_cons= pattern-match:
  - =list_vt_cons(x, xs)=
  - subtracts n by one on every pattern-match
- The solver can figure out the rest!
* Resources
- Chris Double's Blog: http://bluishcoder.co.nz/tags/ats/index.html
- The ATS Book
  - http://ats-lang.sourceforge.net/DOCUMENT/INT2PROGINATS/HTML/book1.html
- ATS Google Group
  - https://groups.google.com/forum/#!forum/ats-lang-users
